{
  "stats": {
    "suites": 1,
    "tests": 4,
    "passes": 0,
    "pending": 0,
    "failures": 4,
    "start": "2025-04-05T08:11:29.295Z",
    "end": "2025-04-05T08:11:32.982Z",
    "duration": 3687,
    "testsRegistered": 4,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "ba88763f-8a7b-43e3-824c-7e7d2d9c5dee",
      "title": "",
      "fullFile": "cypress/e2e/api/features/petStore.feature",
      "file": "cypress/e2e/api/features/petStore.feature",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "18f0533a-9e8b-40fb-9497-cae620d10ff4",
          "title": "Pet Store API Testing",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Create a new pet",
              "fullTitle": "Pet Store API Testing Create a new pet",
              "timedOut": null,
              "duration": 304,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "[\n  {\n    \"title\": \"cypress-mochawesome-reporter-videos-failed\",\n    \"value\": \"cypress/e2e/api/features/petStore.feature\"\n  },\n  {\n    \"title\": \"cypress-mochawesome-reporter-screenshots\",\n    \"value\": [\n      [\n        \"/petStore.feature/Pet Store API Testing -- Create a new pet (failed).png\"\n      ]\n    ]\n  }\n]",
              "code": "var _a2, _b2, _c2, _d, _e;\n(0, assertions_1.assert)(context.includedPickles[0].id === pickle.id, \"Included pickle stack is unsynchronized\");\nconst { remainingSteps, testCaseStartedId } = retrieveInternalSpecProperties();\ntaskTestCaseStarted(context, {\n  id: testCaseStartedId,\n  testCaseId,\n  attempt: attempt++,\n  timestamp: (0, messages_1.createTimestamp)()\n});\nwindow.testState = {\n  gherkinDocument,\n  pickles,\n  pickle\n};\nconst onAfterStep = (options) => {\n  var _a3, _b3, _c3;\n  const { testStepId, start, result } = options;\n  const end = (0, messages_1.createTimestamp)();\n  if (result === \"pending\" || result === \"skipped\") {\n    if (result === \"pending\") {\n      taskTestStepFinished(context, {\n        testStepId,\n        testCaseStartedId,\n        testStepResult: {\n          status: messages_enums_1.TestStepResultStatus.PENDING,\n          duration: (0, messages_1.duration)(start, end)\n        },\n        timestamp: end\n      });\n    } else {\n      taskTestStepFinished(context, {\n        testStepId,\n        testCaseStartedId,\n        testStepResult: {\n          status: messages_enums_1.TestStepResultStatus.SKIPPED,\n          duration: (0, messages_1.duration)(start, end)\n        },\n        timestamp: end\n      });\n    }\n    remainingSteps.shift();\n    for (const skippedStep of remainingSteps) {\n      const hookIdOrPickleStepId = (0, assertions_1.assertAndReturn)((_b3 = (_a3 = skippedStep.hook) === null || _a3 === void 0 ? void 0 : _a3.id) !== null && _b3 !== void 0 ? _b3 : (_c3 = skippedStep.pickleStep) === null || _c3 === void 0 ? void 0 : _c3.id, \"Expected a step to either be a hook or a pickleStep\");\n      const testStepId2 = getTestStepId({\n        context,\n        pickleId: pickle.id,\n        hookIdOrPickleStepId\n      });\n      taskTestStepStarted(context, {\n        testStepId: testStepId2,\n        testCaseStartedId,\n        timestamp: (0, messages_1.createTimestamp)()\n      });\n      taskTestStepFinished(context, {\n        testStepId: testStepId2,\n        testCaseStartedId,\n        testStepResult: {\n          status: messages_enums_1.TestStepResultStatus.SKIPPED,\n          duration: {\n            seconds: 0,\n            nanos: 0\n          }\n        },\n        timestamp: (0, messages_1.createTimestamp)()\n      });\n    }\n    for (let i = 0, count = remainingSteps.length; i < count; i++) {\n      remainingSteps.pop();\n    }\n    cy.then(() => this.skip());\n  } else {\n    taskTestStepFinished(context, {\n      testStepId,\n      testCaseStartedId,\n      testStepResult: {\n        status: messages_enums_1.TestStepResultStatus.PASSED,\n        duration: (0, messages_1.duration)(start, end)\n      },\n      timestamp: end\n    });\n    remainingSteps.shift();\n  }\n};\nfor (const step of steps) {\n  if (step.hook) {\n    const hook = step.hook;\n    const testStepId = getTestStepId({\n      context,\n      pickleId: pickle.id,\n      hookIdOrPickleStepId: hook.id\n    });\n    cy.then(() => {\n      delete window.testState.pickleStep;\n      const start = (0, messages_1.createTimestamp)();\n      internalProperties.currentStepStartedAt = start;\n      taskTestStepStarted(context, {\n        testStepId,\n        testCaseStartedId,\n        timestamp: start\n      });\n      return cy.wrap(start, { log: false });\n    }).then((start) => {\n      const options = {\n        pickle,\n        gherkinDocument,\n        testCaseStartedId\n      };\n      return (0, cypress_1.runStepWithLogGroup)({\n        fn: dryRun ? noopFn : () => registry2.runCaseHook(this, hook, options),\n        keyword: hook.keyword,\n        text: createStepDescription(hook)\n      }).then((result) => {\n        return { start, result };\n      });\n    }).then(({ start, result }) => onAfterStep({ start, result, testStepId }));\n  } else if (step.pickleStep) {\n    const pickleStep = step.pickleStep;\n    const testStepId = getTestStepId({\n      context,\n      pickleId: pickle.id,\n      hookIdOrPickleStepId: pickleStep.id\n    });\n    const text = (0, assertions_1.assertAndReturn)(pickleStep.text, \"Expected pickle step to have a text\");\n    const scenarioStep = (0, assertions_1.assertAndReturn)(context.astIdsMap.get((0, assertions_1.assertAndReturn)((_a2 = pickleStep.astNodeIds) === null || _a2 === void 0 ? void 0 : _a2[0], \"Expected to find at least one astNodeId\")), `Expected to find scenario step associated with id = ${(_b2 = pickleStep.astNodeIds) === null || _b2 === void 0 ? void 0 : _b2[0]}`);\n    const argument = ((_c2 = pickleStep.argument) === null || _c2 === void 0 ? void 0 : _c2.dataTable) ? new data_table_1.default(pickleStep.argument.dataTable) : ((_e = (_d = pickleStep.argument) === null || _d === void 0 ? void 0 : _d.docString) === null || _e === void 0 ? void 0 : _e.content) ? pickleStep.argument.docString.content : void 0;\n    cy.then(() => {\n      window.testState.pickleStep = step.pickleStep;\n      const start = (0, messages_1.createTimestamp)();\n      internalProperties.currentStep = { pickleStep };\n      internalProperties.currentStepStartedAt = start;\n      taskTestStepStarted(context, {\n        testStepId,\n        testCaseStartedId,\n        timestamp: start\n      });\n      return cy.wrap(start, { log: false });\n    }).then((start) => {\n      const beforeStepHooks = registry2.resolveBeforeStepHooks(tags);\n      const afterStepHooks = registry2.resolveAfterStepHooks(tags);\n      const options = {\n        pickle,\n        pickleStep,\n        gherkinDocument,\n        testCaseStartedId,\n        testStepId\n      };\n      const beforeHooksChain = beforeStepHooks.reduce((chain, beforeStepHook) => {\n        return chain.then(() => (0, cypress_1.runStepWithLogGroup)({\n          keyword: \"BeforeStep\",\n          text: createStepDescription(beforeStepHook),\n          fn: dryRun ? noopFn : () => registry2.runStepHook(this, beforeStepHook, options)\n        }));\n      }, cy.wrap({}, { log: false }));\n      return beforeHooksChain.then(() => {\n        try {\n          return (0, cypress_1.runStepWithLogGroup)({\n            keyword: (0, assertions_1.assertAndReturn)(\"keyword\" in scenarioStep && scenarioStep.keyword, \"Expected to find a keyword in the scenario step\"),\n            argument,\n            text,\n            fn: () => registry2.runStepDefininition(this, text, dryRun, argument)\n          }).then((result) => {\n            return afterStepHooks.reduce((chain, afterStepHook) => {\n              return chain.then(() => (0, cypress_1.runStepWithLogGroup)({\n                keyword: \"AfterStep\",\n                text: createStepDescription(afterStepHook),\n                fn: dryRun ? noopFn : () => registry2.runStepHook(this, afterStepHook, options)\n              }));\n            }, cy.wrap({}, { log: false })).then(() => {\n              return { start, result };\n            });\n          });\n        } catch (e) {\n          if (e instanceof registry_1.MissingDefinitionError) {\n            throw new Error(createMissingStepDefinitionMessage(context, pickleStep, context.registry.parameterTypeRegistry));\n          } else {\n            throw e;\n          }\n        }\n      });\n    }).then(({ start, result }) => onAfterStep({ start, result, testStepId }));\n  }\n}",
              "err": {
                "message": "Error: \nStep implementation missing for \"I send a POST request to create a pet\".\n\nWe tried searching for files containing step definitions using the following search pattern templates:\n\n  - cypress/e2e/[filepath]/**/*.{js,mjs,ts,tsx}\n  - cypress/e2e/[filepath].{js,mjs,ts,tsx}\n  - cypress/support/step_definitions/**/*.{js,mjs,ts,tsx}\n\nThese templates resolved to the following search patterns:\n\n  - cypress/e2e/api/features/petStore/**/*.{js,mjs,ts,tsx}\n  - cypress/e2e/api/features/petStore.{js,mjs,ts,tsx}\n  - cypress/support/step_definitions/**/*.{js,mjs,ts,tsx}\n\nThese patterns matched the following files:\n\n  - cypress/support/step_definitions/petStoreSteps.js\n\nHowever, none of these files contained a step definition matching \"I send a POST request to create a pet\".\n\nYou can implement it using the suggestion(s) below.\n\n  When(\"I send a POST request to create a pet\", function () {\n    return \"pending\";\n  });\n  ",
                "estack": "Error: \nStep implementation missing for \"I send a POST request to create a pet\".\n\nWe tried searching for files containing step definitions using the following search pattern templates:\n\n  - cypress/e2e/[filepath]/**/*.{js,mjs,ts,tsx}\n  - cypress/e2e/[filepath].{js,mjs,ts,tsx}\n  - cypress/support/step_definitions/**/*.{js,mjs,ts,tsx}\n\nThese templates resolved to the following search patterns:\n\n  - cypress/e2e/api/features/petStore/**/*.{js,mjs,ts,tsx}\n  - cypress/e2e/api/features/petStore.{js,mjs,ts,tsx}\n  - cypress/support/step_definitions/**/*.{js,mjs,ts,tsx}\n\nThese patterns matched the following files:\n\n  - cypress/support/step_definitions/petStoreSteps.js\n\nHowever, none of these files contained a step definition matching \"I send a POST request to create a pet\".\n\nYou can implement it using the suggestion(s) below.\n\n  When(\"I send a POST request to create a pet\", function () {\n    return \"pending\";\n  });\n  \n    at Context.eval (https://www.amphora.net/__cypress/tests?p=cypress/e2e/api/features/petStore.feature:13379:29)\n    at getRet (https://www.amphora.net/__cypress/runner/cypress_runner.js:119371:20)\n    at tryCatcher (https://www.amphora.net/__cypress/runner/cypress_runner.js:1777:23)\n    at Promise.attempt.Promise.try (https://www.amphora.net/__cypress/runner/cypress_runner.js:4285:29)\n    at Context.thenFn (https://www.amphora.net/__cypress/runner/cypress_runner.js:119382:66)\n    at Context.then (https://www.amphora.net/__cypress/runner/cypress_runner.js:119633:21)\n    at wrapped (https://www.amphora.net/__cypress/runner/cypress_runner.js:139910:19)\n    at <unknown> (https://www.amphora.net/__cypress/runner/cypress_runner.js:145855:15)\n    at tryCatcher (https://www.amphora.net/__cypress/runner/cypress_runner.js:1777:23)",
                "diff": null
              },
              "uuid": "cd983bcc-2468-412e-aef8-3a5048b570de",
              "parentUUID": "18f0533a-9e8b-40fb-9497-cae620d10ff4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Update an existing pet",
              "fullTitle": "Pet Store API Testing Update an existing pet",
              "timedOut": null,
              "duration": 1106,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "[\n  {\n    \"title\": \"cypress-mochawesome-reporter-videos-failed\",\n    \"value\": \"cypress/e2e/api/features/petStore.feature\"\n  },\n  {\n    \"title\": \"cypress-mochawesome-reporter-screenshots\",\n    \"value\": [\n      [\n        \"/petStore.feature/Pet Store API Testing -- Update an existing pet (failed).png\"\n      ]\n    ]\n  }\n]",
              "code": "var _a2, _b2, _c2, _d, _e;\n(0, assertions_1.assert)(context.includedPickles[0].id === pickle.id, \"Included pickle stack is unsynchronized\");\nconst { remainingSteps, testCaseStartedId } = retrieveInternalSpecProperties();\ntaskTestCaseStarted(context, {\n  id: testCaseStartedId,\n  testCaseId,\n  attempt: attempt++,\n  timestamp: (0, messages_1.createTimestamp)()\n});\nwindow.testState = {\n  gherkinDocument,\n  pickles,\n  pickle\n};\nconst onAfterStep = (options) => {\n  var _a3, _b3, _c3;\n  const { testStepId, start, result } = options;\n  const end = (0, messages_1.createTimestamp)();\n  if (result === \"pending\" || result === \"skipped\") {\n    if (result === \"pending\") {\n      taskTestStepFinished(context, {\n        testStepId,\n        testCaseStartedId,\n        testStepResult: {\n          status: messages_enums_1.TestStepResultStatus.PENDING,\n          duration: (0, messages_1.duration)(start, end)\n        },\n        timestamp: end\n      });\n    } else {\n      taskTestStepFinished(context, {\n        testStepId,\n        testCaseStartedId,\n        testStepResult: {\n          status: messages_enums_1.TestStepResultStatus.SKIPPED,\n          duration: (0, messages_1.duration)(start, end)\n        },\n        timestamp: end\n      });\n    }\n    remainingSteps.shift();\n    for (const skippedStep of remainingSteps) {\n      const hookIdOrPickleStepId = (0, assertions_1.assertAndReturn)((_b3 = (_a3 = skippedStep.hook) === null || _a3 === void 0 ? void 0 : _a3.id) !== null && _b3 !== void 0 ? _b3 : (_c3 = skippedStep.pickleStep) === null || _c3 === void 0 ? void 0 : _c3.id, \"Expected a step to either be a hook or a pickleStep\");\n      const testStepId2 = getTestStepId({\n        context,\n        pickleId: pickle.id,\n        hookIdOrPickleStepId\n      });\n      taskTestStepStarted(context, {\n        testStepId: testStepId2,\n        testCaseStartedId,\n        timestamp: (0, messages_1.createTimestamp)()\n      });\n      taskTestStepFinished(context, {\n        testStepId: testStepId2,\n        testCaseStartedId,\n        testStepResult: {\n          status: messages_enums_1.TestStepResultStatus.SKIPPED,\n          duration: {\n            seconds: 0,\n            nanos: 0\n          }\n        },\n        timestamp: (0, messages_1.createTimestamp)()\n      });\n    }\n    for (let i = 0, count = remainingSteps.length; i < count; i++) {\n      remainingSteps.pop();\n    }\n    cy.then(() => this.skip());\n  } else {\n    taskTestStepFinished(context, {\n      testStepId,\n      testCaseStartedId,\n      testStepResult: {\n        status: messages_enums_1.TestStepResultStatus.PASSED,\n        duration: (0, messages_1.duration)(start, end)\n      },\n      timestamp: end\n    });\n    remainingSteps.shift();\n  }\n};\nfor (const step of steps) {\n  if (step.hook) {\n    const hook = step.hook;\n    const testStepId = getTestStepId({\n      context,\n      pickleId: pickle.id,\n      hookIdOrPickleStepId: hook.id\n    });\n    cy.then(() => {\n      delete window.testState.pickleStep;\n      const start = (0, messages_1.createTimestamp)();\n      internalProperties.currentStepStartedAt = start;\n      taskTestStepStarted(context, {\n        testStepId,\n        testCaseStartedId,\n        timestamp: start\n      });\n      return cy.wrap(start, { log: false });\n    }).then((start) => {\n      const options = {\n        pickle,\n        gherkinDocument,\n        testCaseStartedId\n      };\n      return (0, cypress_1.runStepWithLogGroup)({\n        fn: dryRun ? noopFn : () => registry2.runCaseHook(this, hook, options),\n        keyword: hook.keyword,\n        text: createStepDescription(hook)\n      }).then((result) => {\n        return { start, result };\n      });\n    }).then(({ start, result }) => onAfterStep({ start, result, testStepId }));\n  } else if (step.pickleStep) {\n    const pickleStep = step.pickleStep;\n    const testStepId = getTestStepId({\n      context,\n      pickleId: pickle.id,\n      hookIdOrPickleStepId: pickleStep.id\n    });\n    const text = (0, assertions_1.assertAndReturn)(pickleStep.text, \"Expected pickle step to have a text\");\n    const scenarioStep = (0, assertions_1.assertAndReturn)(context.astIdsMap.get((0, assertions_1.assertAndReturn)((_a2 = pickleStep.astNodeIds) === null || _a2 === void 0 ? void 0 : _a2[0], \"Expected to find at least one astNodeId\")), `Expected to find scenario step associated with id = ${(_b2 = pickleStep.astNodeIds) === null || _b2 === void 0 ? void 0 : _b2[0]}`);\n    const argument = ((_c2 = pickleStep.argument) === null || _c2 === void 0 ? void 0 : _c2.dataTable) ? new data_table_1.default(pickleStep.argument.dataTable) : ((_e = (_d = pickleStep.argument) === null || _d === void 0 ? void 0 : _d.docString) === null || _e === void 0 ? void 0 : _e.content) ? pickleStep.argument.docString.content : void 0;\n    cy.then(() => {\n      window.testState.pickleStep = step.pickleStep;\n      const start = (0, messages_1.createTimestamp)();\n      internalProperties.currentStep = { pickleStep };\n      internalProperties.currentStepStartedAt = start;\n      taskTestStepStarted(context, {\n        testStepId,\n        testCaseStartedId,\n        timestamp: start\n      });\n      return cy.wrap(start, { log: false });\n    }).then((start) => {\n      const beforeStepHooks = registry2.resolveBeforeStepHooks(tags);\n      const afterStepHooks = registry2.resolveAfterStepHooks(tags);\n      const options = {\n        pickle,\n        pickleStep,\n        gherkinDocument,\n        testCaseStartedId,\n        testStepId\n      };\n      const beforeHooksChain = beforeStepHooks.reduce((chain, beforeStepHook) => {\n        return chain.then(() => (0, cypress_1.runStepWithLogGroup)({\n          keyword: \"BeforeStep\",\n          text: createStepDescription(beforeStepHook),\n          fn: dryRun ? noopFn : () => registry2.runStepHook(this, beforeStepHook, options)\n        }));\n      }, cy.wrap({}, { log: false }));\n      return beforeHooksChain.then(() => {\n        try {\n          return (0, cypress_1.runStepWithLogGroup)({\n            keyword: (0, assertions_1.assertAndReturn)(\"keyword\" in scenarioStep && scenarioStep.keyword, \"Expected to find a keyword in the scenario step\"),\n            argument,\n            text,\n            fn: () => registry2.runStepDefininition(this, text, dryRun, argument)\n          }).then((result) => {\n            return afterStepHooks.reduce((chain, afterStepHook) => {\n              return chain.then(() => (0, cypress_1.runStepWithLogGroup)({\n                keyword: \"AfterStep\",\n                text: createStepDescription(afterStepHook),\n                fn: dryRun ? noopFn : () => registry2.runStepHook(this, afterStepHook, options)\n              }));\n            }, cy.wrap({}, { log: false })).then(() => {\n              return { start, result };\n            });\n          });\n        } catch (e) {\n          if (e instanceof registry_1.MissingDefinitionError) {\n            throw new Error(createMissingStepDefinitionMessage(context, pickleStep, context.registry.parameterTypeRegistry));\n          } else {\n            throw e;\n          }\n        }\n      });\n    }).then(({ start, result }) => onAfterStep({ start, result, testStepId }));\n  }\n}",
              "err": {
                "message": "CypressError: `cy.request()` failed on:\n\nhttps://www.amphora.net/pet\n\nThe response we received from your web server was:\n\n  > 404: Not Found\n\nThis was considered a failure because the status code was not `2xx` or `3xx`.\n\nIf you do not want status codes to cause failures pass the option: `failOnStatusCode: false`\n\n-----------------------------------------------------------\n\nThe request we sent was:\n\nMethod: POST\nURL: https://www.amphora.net/pet\nHeaders: {\n  \"Connection\": \"keep-alive\",\n  \"user-agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Cypress/14.2.1 Chrome/130.0.6723.137 Electron/33.2.1 Safari/537.36\",\n  \"accept\": \"*/*\",\n  \"accept-encoding\": \"gzip, deflate\",\n  \"content-type\": \"application/json\",\n  \"content-length\": 156\n}\nBody: {\"id\":123456,\"name\":\"Rex\",\"category\":{\"id\":1,\"name\":\"dog\"},\"photoUrls\":[\"https://example.com/dog.jpg\"],\"tags\":[{\"id\":1,\"name\":\"cute\"}],\"status\":\"available\"}\n\n-----------------------------------------------------------\n\nThe response we got was:\n\nStatus: 404 - Not Found\nHeaders: {\n  \"date\": \"Sat, 05 Apr 2025 08:11:30 GMT\",\n  \"content-type\": \"text/html; charset=UTF-8\",\n  \"transfer-encoding\": \"chunked\",\n  \"connection\": \"keep-alive\",\n  \"cache-control\": \"no-cache, must-revalidate, max-age=0\",\n  \"content-security-policy\": \"upgrade-insecure-requests\",\n  \"expires\": \"Wed, 11 Jan 1984 05:00:00 GMT\",\n  \"link\": \"<https://amphora.net/wp-json/>; rel=\\\"https://api.w.org/\\\"\",\n  \"server-timing\": \"wp-before-template;dur=524.06\",\n  \"strict-transport-security\": \"max-age=300, max-age=31536000; includeSubDomains\",\n  \"x-cacheproxy-retries\": \"0/2\",\n  \"x-content-type-options\": \"nosniff\",\n  \"x-fawn-proc-count\": \"1,0,24\",\n  \"x-php-version\": \"8.0\",\n  \"x-xss-protection\": \"1; mode=block\",\n  \"x-backend\": \"varnish_ssl\",\n  \"vary\": \"accept-encoding\",\n  \"cf-cache-status\": \"DYNAMIC\",\n  \"server\": \"cloudflare\",\n  \"cf-ray\": \"92b7933849c52e90-HYD\",\n  \"content-encoding\": \"gzip\",\n  \"alt-svc\": \"h3=\\\":443\\\"; ma=86400\"\n}\nBody: <!doctype html>\n<html lang=\"en-US\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    />\n    <meta name=\"format-detection\" content=\"telephone=no\" />\n    <link rel=\"profile\" href=\"https://gmpg.org/xfn/11\">\n\n    <script>\n      // Picture element HTML5 shiv\n      document.createElement('picture');\n    </script>\n\t<script src='//cdn.freshmarketer.com/666159/1717304.js'></script>\n\t<script>\n\t\tvar userValues = {\n\t\t\"lead[email]\":\" value_to_be_replaced\",\n\t\t\"lead[first_name]\":\" value_to_be_replaced\",\n\t\t\"lead[company][name]\":\" value_to_be_replaced\",\n\t\t\"lead[job_title]\":\" value_to_be_replaced\",\n\t\t\"lead[last_name]\":\" value_to_be_replaced\"};\n\t\twindow.FMApi = window.FMApi || []; window.FMApi.push(\"fm_form_tracking\", \"4EBC17F7FB04D3202BC00F2F77BE7BB32C2BD8F5E8EC2B4EE7D4510C739A215D8168EBF0C6C02D7EE85DEF4FBE412B34B1EC396D36D721311AA41B3B1AF965D7\", userValues);\n\t</script>\n    <title>Page not found &#8211; Amphora</title>\n<meta name='robots' content='max-image-preview:large' />\n\t<style>img:is([sizes=\"auto\" i], [sizes^=\"auto,\" i]) { contain-intrinsic-size: 3000px 1500px }</style>\n\t<script id=\"cookieyes\" type=\"text/javascript\" src=\"https://cdn-cookieyes.com/client_data/763f30b3ed10a5017d023e3a/script.js\"></script><link rel='dns-prefetch' href='//amphora.net' />\n<link rel=\"alternate\" type=\"application/rss+xml\" title=\"Amphora &raquo; Feed\" href=\"https://amphora.net/feed/\" />\n<link rel=\"alternate\" type=\"application/rss+xml\" title=\"Amphora &raquo; Comments Feed\" href=\"https://amphora.net/comments/feed/\" />\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nwindow._wpemojiSettings = {\"baseUrl\":\"https:\\/\\/s.w.org\\/images\\/core\\/emoji\\/15.0.3\\/72x72\\/\",\"ext\":\".png\",\"svgUrl\":\"https:\\/\\/s.w.org\\/images\\/core\\/emoji\\/15.0.3\\/svg\\/\",\"svgExt\":\".svg\",\"source\":{\"concatemoji\":\"https:\\/\\/amphora.net\\/wp-includes\\/js\\/wp-emoji-release.min.js?ver=0980ce573...\n\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` failed on:\n\nhttps://www.amphora.net/pet\n\nThe response we received from your web server was:\n\n  > 404: Not Found\n\nThis was considered a failure because the status code was not `2xx` or `3xx`.\n\nIf you do not want status codes to cause failures pass the option: `failOnStatusCode: false`\n\n-----------------------------------------------------------\n\nThe request we sent was:\n\nMethod: POST\nURL: https://www.amphora.net/pet\nHeaders: {\n  \"Connection\": \"keep-alive\",\n  \"user-agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Cypress/14.2.1 Chrome/130.0.6723.137 Electron/33.2.1 Safari/537.36\",\n  \"accept\": \"*/*\",\n  \"accept-encoding\": \"gzip, deflate\",\n  \"content-type\": \"application/json\",\n  \"content-length\": 156\n}\nBody: {\"id\":123456,\"name\":\"Rex\",\"category\":{\"id\":1,\"name\":\"dog\"},\"photoUrls\":[\"https://example.com/dog.jpg\"],\"tags\":[{\"id\":1,\"name\":\"cute\"}],\"status\":\"available\"}\n\n-----------------------------------------------------------\n\nThe response we got was:\n\nStatus: 404 - Not Found\nHeaders: {\n  \"date\": \"Sat, 05 Apr 2025 08:11:30 GMT\",\n  \"content-type\": \"text/html; charset=UTF-8\",\n  \"transfer-encoding\": \"chunked\",\n  \"connection\": \"keep-alive\",\n  \"cache-control\": \"no-cache, must-revalidate, max-age=0\",\n  \"content-security-policy\": \"upgrade-insecure-requests\",\n  \"expires\": \"Wed, 11 Jan 1984 05:00:00 GMT\",\n  \"link\": \"<https://amphora.net/wp-json/>; rel=\\\"https://api.w.org/\\\"\",\n  \"server-timing\": \"wp-before-template;dur=524.06\",\n  \"strict-transport-security\": \"max-age=300, max-age=31536000; includeSubDomains\",\n  \"x-cacheproxy-retries\": \"0/2\",\n  \"x-content-type-options\": \"nosniff\",\n  \"x-fawn-proc-count\": \"1,0,24\",\n  \"x-php-version\": \"8.0\",\n  \"x-xss-protection\": \"1; mode=block\",\n  \"x-backend\": \"varnish_ssl\",\n  \"vary\": \"accept-encoding\",\n  \"cf-cache-status\": \"DYNAMIC\",\n  \"server\": \"cloudflare\",\n  \"cf-ray\": \"92b7933849c52e90-HYD\",\n  \"content-encoding\": \"gzip\",\n  \"alt-svc\": \"h3=\\\":443\\\"; ma=86400\"\n}\nBody: <!doctype html>\n<html lang=\"en-US\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    />\n    <meta name=\"format-detection\" content=\"telephone=no\" />\n    <link rel=\"profile\" href=\"https://gmpg.org/xfn/11\">\n\n    <script>\n      // Picture element HTML5 shiv\n      document.createElement('picture');\n    </script>\n\t<script src='//cdn.freshmarketer.com/666159/1717304.js'></script>\n\t<script>\n\t\tvar userValues = {\n\t\t\"lead[email]\":\" value_to_be_replaced\",\n\t\t\"lead[first_name]\":\" value_to_be_replaced\",\n\t\t\"lead[company][name]\":\" value_to_be_replaced\",\n\t\t\"lead[job_title]\":\" value_to_be_replaced\",\n\t\t\"lead[last_name]\":\" value_to_be_replaced\"};\n\t\twindow.FMApi = window.FMApi || []; window.FMApi.push(\"fm_form_tracking\", \"4EBC17F7FB04D3202BC00F2F77BE7BB32C2BD8F5E8EC2B4EE7D4510C739A215D8168EBF0C6C02D7EE85DEF4FBE412B34B1EC396D36D721311AA41B3B1AF965D7\", userValues);\n\t</script>\n    <title>Page not found &#8211; Amphora</title>\n<meta name='robots' content='max-image-preview:large' />\n\t<style>img:is([sizes=\"auto\" i], [sizes^=\"auto,\" i]) { contain-intrinsic-size: 3000px 1500px }</style>\n\t<script id=\"cookieyes\" type=\"text/javascript\" src=\"https://cdn-cookieyes.com/client_data/763f30b3ed10a5017d023e3a/script.js\"></script><link rel='dns-prefetch' href='//amphora.net' />\n<link rel=\"alternate\" type=\"application/rss+xml\" title=\"Amphora &raquo; Feed\" href=\"https://amphora.net/feed/\" />\n<link rel=\"alternate\" type=\"application/rss+xml\" title=\"Amphora &raquo; Comments Feed\" href=\"https://amphora.net/comments/feed/\" />\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nwindow._wpemojiSettings = {\"baseUrl\":\"https:\\/\\/s.w.org\\/images\\/core\\/emoji\\/15.0.3\\/72x72\\/\",\"ext\":\".png\",\"svgUrl\":\"https:\\/\\/s.w.org\\/images\\/core\\/emoji\\/15.0.3\\/svg\\/\",\"svgExt\":\".svg\",\"source\":{\"concatemoji\":\"https:\\/\\/amphora.net\\/wp-includes\\/js\\/wp-emoji-release.min.js?ver=0980ce573...\n\n\nhttps://on.cypress.io/request\n    at <unknown> (https://www.amphora.net/__cypress/runner/cypress_runner.js:134734:72)\n    at tryCatcher (https://www.amphora.net/__cypress/runner/cypress_runner.js:1777:23)\n    at Promise._settlePromiseFromHandler (https://www.amphora.net/__cypress/runner/cypress_runner.js:1489:31)\n    at Promise._settlePromise (https://www.amphora.net/__cypress/runner/cypress_runner.js:1546:18)\n    at Promise._settlePromise0 (https://www.amphora.net/__cypress/runner/cypress_runner.js:1591:10)\n    at Promise._settlePromises (https://www.amphora.net/__cypress/runner/cypress_runner.js:1671:18)\n    at _drainQueueStep (https://www.amphora.net/__cypress/runner/cypress_runner.js:2377:12)\n    at _drainQueue (https://www.amphora.net/__cypress/runner/cypress_runner.js:2370:9)\n    at Async._drainQueues (https://www.amphora.net/__cypress/runner/cypress_runner.js:2386:5)\n    at Async.drainQueues (https://www.amphora.net/__cypress/runner/cypress_runner.js:2256:14)\nFrom Your Spec Code:\n    at Context.eval (https://www.amphora.net/__cypress/tests?p=cypress/e2e/api/features/petStore.feature:13968:14)\n    at getRet (https://www.amphora.net/__cypress/runner/cypress_runner.js:119371:20)\n    at tryCatcher (https://www.amphora.net/__cypress/runner/cypress_runner.js:1777:23)\n    at Promise.attempt.Promise.try (https://www.amphora.net/__cypress/runner/cypress_runner.js:4285:29)\n    at Context.thenFn (https://www.amphora.net/__cypress/runner/cypress_runner.js:119382:66)\n    at Context.then (https://www.amphora.net/__cypress/runner/cypress_runner.js:119633:21)\n    at wrapped (https://www.amphora.net/__cypress/runner/cypress_runner.js:139910:19)",
                "diff": null
              },
              "uuid": "0a81b215-afdd-465e-b8d5-45ac1481a24e",
              "parentUUID": "18f0533a-9e8b-40fb-9497-cae620d10ff4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get pet by ID",
              "fullTitle": "Pet Store API Testing Get pet by ID",
              "timedOut": null,
              "duration": 1093,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "[\n  {\n    \"title\": \"cypress-mochawesome-reporter-videos-failed\",\n    \"value\": \"cypress/e2e/api/features/petStore.feature\"\n  },\n  {\n    \"title\": \"cypress-mochawesome-reporter-screenshots\",\n    \"value\": [\n      [\n        \"/petStore.feature/Pet Store API Testing -- Get pet by ID (failed).png\"\n      ]\n    ]\n  }\n]",
              "code": "var _a2, _b2, _c2, _d, _e;\n(0, assertions_1.assert)(context.includedPickles[0].id === pickle.id, \"Included pickle stack is unsynchronized\");\nconst { remainingSteps, testCaseStartedId } = retrieveInternalSpecProperties();\ntaskTestCaseStarted(context, {\n  id: testCaseStartedId,\n  testCaseId,\n  attempt: attempt++,\n  timestamp: (0, messages_1.createTimestamp)()\n});\nwindow.testState = {\n  gherkinDocument,\n  pickles,\n  pickle\n};\nconst onAfterStep = (options) => {\n  var _a3, _b3, _c3;\n  const { testStepId, start, result } = options;\n  const end = (0, messages_1.createTimestamp)();\n  if (result === \"pending\" || result === \"skipped\") {\n    if (result === \"pending\") {\n      taskTestStepFinished(context, {\n        testStepId,\n        testCaseStartedId,\n        testStepResult: {\n          status: messages_enums_1.TestStepResultStatus.PENDING,\n          duration: (0, messages_1.duration)(start, end)\n        },\n        timestamp: end\n      });\n    } else {\n      taskTestStepFinished(context, {\n        testStepId,\n        testCaseStartedId,\n        testStepResult: {\n          status: messages_enums_1.TestStepResultStatus.SKIPPED,\n          duration: (0, messages_1.duration)(start, end)\n        },\n        timestamp: end\n      });\n    }\n    remainingSteps.shift();\n    for (const skippedStep of remainingSteps) {\n      const hookIdOrPickleStepId = (0, assertions_1.assertAndReturn)((_b3 = (_a3 = skippedStep.hook) === null || _a3 === void 0 ? void 0 : _a3.id) !== null && _b3 !== void 0 ? _b3 : (_c3 = skippedStep.pickleStep) === null || _c3 === void 0 ? void 0 : _c3.id, \"Expected a step to either be a hook or a pickleStep\");\n      const testStepId2 = getTestStepId({\n        context,\n        pickleId: pickle.id,\n        hookIdOrPickleStepId\n      });\n      taskTestStepStarted(context, {\n        testStepId: testStepId2,\n        testCaseStartedId,\n        timestamp: (0, messages_1.createTimestamp)()\n      });\n      taskTestStepFinished(context, {\n        testStepId: testStepId2,\n        testCaseStartedId,\n        testStepResult: {\n          status: messages_enums_1.TestStepResultStatus.SKIPPED,\n          duration: {\n            seconds: 0,\n            nanos: 0\n          }\n        },\n        timestamp: (0, messages_1.createTimestamp)()\n      });\n    }\n    for (let i = 0, count = remainingSteps.length; i < count; i++) {\n      remainingSteps.pop();\n    }\n    cy.then(() => this.skip());\n  } else {\n    taskTestStepFinished(context, {\n      testStepId,\n      testCaseStartedId,\n      testStepResult: {\n        status: messages_enums_1.TestStepResultStatus.PASSED,\n        duration: (0, messages_1.duration)(start, end)\n      },\n      timestamp: end\n    });\n    remainingSteps.shift();\n  }\n};\nfor (const step of steps) {\n  if (step.hook) {\n    const hook = step.hook;\n    const testStepId = getTestStepId({\n      context,\n      pickleId: pickle.id,\n      hookIdOrPickleStepId: hook.id\n    });\n    cy.then(() => {\n      delete window.testState.pickleStep;\n      const start = (0, messages_1.createTimestamp)();\n      internalProperties.currentStepStartedAt = start;\n      taskTestStepStarted(context, {\n        testStepId,\n        testCaseStartedId,\n        timestamp: start\n      });\n      return cy.wrap(start, { log: false });\n    }).then((start) => {\n      const options = {\n        pickle,\n        gherkinDocument,\n        testCaseStartedId\n      };\n      return (0, cypress_1.runStepWithLogGroup)({\n        fn: dryRun ? noopFn : () => registry2.runCaseHook(this, hook, options),\n        keyword: hook.keyword,\n        text: createStepDescription(hook)\n      }).then((result) => {\n        return { start, result };\n      });\n    }).then(({ start, result }) => onAfterStep({ start, result, testStepId }));\n  } else if (step.pickleStep) {\n    const pickleStep = step.pickleStep;\n    const testStepId = getTestStepId({\n      context,\n      pickleId: pickle.id,\n      hookIdOrPickleStepId: pickleStep.id\n    });\n    const text = (0, assertions_1.assertAndReturn)(pickleStep.text, \"Expected pickle step to have a text\");\n    const scenarioStep = (0, assertions_1.assertAndReturn)(context.astIdsMap.get((0, assertions_1.assertAndReturn)((_a2 = pickleStep.astNodeIds) === null || _a2 === void 0 ? void 0 : _a2[0], \"Expected to find at least one astNodeId\")), `Expected to find scenario step associated with id = ${(_b2 = pickleStep.astNodeIds) === null || _b2 === void 0 ? void 0 : _b2[0]}`);\n    const argument = ((_c2 = pickleStep.argument) === null || _c2 === void 0 ? void 0 : _c2.dataTable) ? new data_table_1.default(pickleStep.argument.dataTable) : ((_e = (_d = pickleStep.argument) === null || _d === void 0 ? void 0 : _d.docString) === null || _e === void 0 ? void 0 : _e.content) ? pickleStep.argument.docString.content : void 0;\n    cy.then(() => {\n      window.testState.pickleStep = step.pickleStep;\n      const start = (0, messages_1.createTimestamp)();\n      internalProperties.currentStep = { pickleStep };\n      internalProperties.currentStepStartedAt = start;\n      taskTestStepStarted(context, {\n        testStepId,\n        testCaseStartedId,\n        timestamp: start\n      });\n      return cy.wrap(start, { log: false });\n    }).then((start) => {\n      const beforeStepHooks = registry2.resolveBeforeStepHooks(tags);\n      const afterStepHooks = registry2.resolveAfterStepHooks(tags);\n      const options = {\n        pickle,\n        pickleStep,\n        gherkinDocument,\n        testCaseStartedId,\n        testStepId\n      };\n      const beforeHooksChain = beforeStepHooks.reduce((chain, beforeStepHook) => {\n        return chain.then(() => (0, cypress_1.runStepWithLogGroup)({\n          keyword: \"BeforeStep\",\n          text: createStepDescription(beforeStepHook),\n          fn: dryRun ? noopFn : () => registry2.runStepHook(this, beforeStepHook, options)\n        }));\n      }, cy.wrap({}, { log: false }));\n      return beforeHooksChain.then(() => {\n        try {\n          return (0, cypress_1.runStepWithLogGroup)({\n            keyword: (0, assertions_1.assertAndReturn)(\"keyword\" in scenarioStep && scenarioStep.keyword, \"Expected to find a keyword in the scenario step\"),\n            argument,\n            text,\n            fn: () => registry2.runStepDefininition(this, text, dryRun, argument)\n          }).then((result) => {\n            return afterStepHooks.reduce((chain, afterStepHook) => {\n              return chain.then(() => (0, cypress_1.runStepWithLogGroup)({\n                keyword: \"AfterStep\",\n                text: createStepDescription(afterStepHook),\n                fn: dryRun ? noopFn : () => registry2.runStepHook(this, afterStepHook, options)\n              }));\n            }, cy.wrap({}, { log: false })).then(() => {\n              return { start, result };\n            });\n          });\n        } catch (e) {\n          if (e instanceof registry_1.MissingDefinitionError) {\n            throw new Error(createMissingStepDefinitionMessage(context, pickleStep, context.registry.parameterTypeRegistry));\n          } else {\n            throw e;\n          }\n        }\n      });\n    }).then(({ start, result }) => onAfterStep({ start, result, testStepId }));\n  }\n}",
              "err": {
                "message": "CypressError: `cy.request()` failed on:\n\nhttps://www.amphora.net/pet\n\nThe response we received from your web server was:\n\n  > 404: Not Found\n\nThis was considered a failure because the status code was not `2xx` or `3xx`.\n\nIf you do not want status codes to cause failures pass the option: `failOnStatusCode: false`\n\n-----------------------------------------------------------\n\nThe request we sent was:\n\nMethod: POST\nURL: https://www.amphora.net/pet\nHeaders: {\n  \"Connection\": \"keep-alive\",\n  \"user-agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Cypress/14.2.1 Chrome/130.0.6723.137 Electron/33.2.1 Safari/537.36\",\n  \"accept\": \"*/*\",\n  \"accept-encoding\": \"gzip, deflate\",\n  \"content-type\": \"application/json\",\n  \"content-length\": 156\n}\nBody: {\"id\":123456,\"name\":\"Rex\",\"category\":{\"id\":1,\"name\":\"dog\"},\"photoUrls\":[\"https://example.com/dog.jpg\"],\"tags\":[{\"id\":1,\"name\":\"cute\"}],\"status\":\"available\"}\n\n-----------------------------------------------------------\n\nThe response we got was:\n\nStatus: 404 - Not Found\nHeaders: {\n  \"date\": \"Sat, 05 Apr 2025 08:11:31 GMT\",\n  \"content-type\": \"text/html; charset=UTF-8\",\n  \"transfer-encoding\": \"chunked\",\n  \"connection\": \"keep-alive\",\n  \"cache-control\": \"no-cache, must-revalidate, max-age=0\",\n  \"content-security-policy\": \"upgrade-insecure-requests\",\n  \"expires\": \"Wed, 11 Jan 1984 05:00:00 GMT\",\n  \"link\": \"<https://amphora.net/wp-json/>; rel=\\\"https://api.w.org/\\\"\",\n  \"server-timing\": \"wp-before-template;dur=519.73\",\n  \"strict-transport-security\": \"max-age=300, max-age=31536000; includeSubDomains\",\n  \"x-cacheproxy-retries\": \"0/2\",\n  \"x-content-type-options\": \"nosniff\",\n  \"x-fawn-proc-count\": \"1,0,24\",\n  \"x-php-version\": \"8.0\",\n  \"x-xss-protection\": \"1; mode=block\",\n  \"x-backend\": \"varnish_ssl\",\n  \"vary\": \"accept-encoding\",\n  \"cf-cache-status\": \"DYNAMIC\",\n  \"server\": \"cloudflare\",\n  \"cf-ray\": \"92b7933ef8312e90-HYD\",\n  \"content-encoding\": \"gzip\",\n  \"alt-svc\": \"h3=\\\":443\\\"; ma=86400\"\n}\nBody: <!doctype html>\n<html lang=\"en-US\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    />\n    <meta name=\"format-detection\" content=\"telephone=no\" />\n    <link rel=\"profile\" href=\"https://gmpg.org/xfn/11\">\n\n    <script>\n      // Picture element HTML5 shiv\n      document.createElement('picture');\n    </script>\n\t<script src='//cdn.freshmarketer.com/666159/1717304.js'></script>\n\t<script>\n\t\tvar userValues = {\n\t\t\"lead[email]\":\" value_to_be_replaced\",\n\t\t\"lead[first_name]\":\" value_to_be_replaced\",\n\t\t\"lead[company][name]\":\" value_to_be_replaced\",\n\t\t\"lead[job_title]\":\" value_to_be_replaced\",\n\t\t\"lead[last_name]\":\" value_to_be_replaced\"};\n\t\twindow.FMApi = window.FMApi || []; window.FMApi.push(\"fm_form_tracking\", \"4EBC17F7FB04D3202BC00F2F77BE7BB32C2BD8F5E8EC2B4EE7D4510C739A215D8168EBF0C6C02D7EE85DEF4FBE412B34B1EC396D36D721311AA41B3B1AF965D7\", userValues);\n\t</script>\n    <title>Page not found &#8211; Amphora</title>\n<meta name='robots' content='max-image-preview:large' />\n\t<style>img:is([sizes=\"auto\" i], [sizes^=\"auto,\" i]) { contain-intrinsic-size: 3000px 1500px }</style>\n\t<script id=\"cookieyes\" type=\"text/javascript\" src=\"https://cdn-cookieyes.com/client_data/763f30b3ed10a5017d023e3a/script.js\"></script><link rel='dns-prefetch' href='//amphora.net' />\n<link rel=\"alternate\" type=\"application/rss+xml\" title=\"Amphora &raquo; Feed\" href=\"https://amphora.net/feed/\" />\n<link rel=\"alternate\" type=\"application/rss+xml\" title=\"Amphora &raquo; Comments Feed\" href=\"https://amphora.net/comments/feed/\" />\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nwindow._wpemojiSettings = {\"baseUrl\":\"https:\\/\\/s.w.org\\/images\\/core\\/emoji\\/15.0.3\\/72x72\\/\",\"ext\":\".png\",\"svgUrl\":\"https:\\/\\/s.w.org\\/images\\/core\\/emoji\\/15.0.3\\/svg\\/\",\"svgExt\":\".svg\",\"source\":{\"concatemoji\":\"https:\\/\\/amphora.net\\/wp-includes\\/js\\/wp-emoji-release.min.js?ver=0980ce573...\n\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` failed on:\n\nhttps://www.amphora.net/pet\n\nThe response we received from your web server was:\n\n  > 404: Not Found\n\nThis was considered a failure because the status code was not `2xx` or `3xx`.\n\nIf you do not want status codes to cause failures pass the option: `failOnStatusCode: false`\n\n-----------------------------------------------------------\n\nThe request we sent was:\n\nMethod: POST\nURL: https://www.amphora.net/pet\nHeaders: {\n  \"Connection\": \"keep-alive\",\n  \"user-agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Cypress/14.2.1 Chrome/130.0.6723.137 Electron/33.2.1 Safari/537.36\",\n  \"accept\": \"*/*\",\n  \"accept-encoding\": \"gzip, deflate\",\n  \"content-type\": \"application/json\",\n  \"content-length\": 156\n}\nBody: {\"id\":123456,\"name\":\"Rex\",\"category\":{\"id\":1,\"name\":\"dog\"},\"photoUrls\":[\"https://example.com/dog.jpg\"],\"tags\":[{\"id\":1,\"name\":\"cute\"}],\"status\":\"available\"}\n\n-----------------------------------------------------------\n\nThe response we got was:\n\nStatus: 404 - Not Found\nHeaders: {\n  \"date\": \"Sat, 05 Apr 2025 08:11:31 GMT\",\n  \"content-type\": \"text/html; charset=UTF-8\",\n  \"transfer-encoding\": \"chunked\",\n  \"connection\": \"keep-alive\",\n  \"cache-control\": \"no-cache, must-revalidate, max-age=0\",\n  \"content-security-policy\": \"upgrade-insecure-requests\",\n  \"expires\": \"Wed, 11 Jan 1984 05:00:00 GMT\",\n  \"link\": \"<https://amphora.net/wp-json/>; rel=\\\"https://api.w.org/\\\"\",\n  \"server-timing\": \"wp-before-template;dur=519.73\",\n  \"strict-transport-security\": \"max-age=300, max-age=31536000; includeSubDomains\",\n  \"x-cacheproxy-retries\": \"0/2\",\n  \"x-content-type-options\": \"nosniff\",\n  \"x-fawn-proc-count\": \"1,0,24\",\n  \"x-php-version\": \"8.0\",\n  \"x-xss-protection\": \"1; mode=block\",\n  \"x-backend\": \"varnish_ssl\",\n  \"vary\": \"accept-encoding\",\n  \"cf-cache-status\": \"DYNAMIC\",\n  \"server\": \"cloudflare\",\n  \"cf-ray\": \"92b7933ef8312e90-HYD\",\n  \"content-encoding\": \"gzip\",\n  \"alt-svc\": \"h3=\\\":443\\\"; ma=86400\"\n}\nBody: <!doctype html>\n<html lang=\"en-US\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    />\n    <meta name=\"format-detection\" content=\"telephone=no\" />\n    <link rel=\"profile\" href=\"https://gmpg.org/xfn/11\">\n\n    <script>\n      // Picture element HTML5 shiv\n      document.createElement('picture');\n    </script>\n\t<script src='//cdn.freshmarketer.com/666159/1717304.js'></script>\n\t<script>\n\t\tvar userValues = {\n\t\t\"lead[email]\":\" value_to_be_replaced\",\n\t\t\"lead[first_name]\":\" value_to_be_replaced\",\n\t\t\"lead[company][name]\":\" value_to_be_replaced\",\n\t\t\"lead[job_title]\":\" value_to_be_replaced\",\n\t\t\"lead[last_name]\":\" value_to_be_replaced\"};\n\t\twindow.FMApi = window.FMApi || []; window.FMApi.push(\"fm_form_tracking\", \"4EBC17F7FB04D3202BC00F2F77BE7BB32C2BD8F5E8EC2B4EE7D4510C739A215D8168EBF0C6C02D7EE85DEF4FBE412B34B1EC396D36D721311AA41B3B1AF965D7\", userValues);\n\t</script>\n    <title>Page not found &#8211; Amphora</title>\n<meta name='robots' content='max-image-preview:large' />\n\t<style>img:is([sizes=\"auto\" i], [sizes^=\"auto,\" i]) { contain-intrinsic-size: 3000px 1500px }</style>\n\t<script id=\"cookieyes\" type=\"text/javascript\" src=\"https://cdn-cookieyes.com/client_data/763f30b3ed10a5017d023e3a/script.js\"></script><link rel='dns-prefetch' href='//amphora.net' />\n<link rel=\"alternate\" type=\"application/rss+xml\" title=\"Amphora &raquo; Feed\" href=\"https://amphora.net/feed/\" />\n<link rel=\"alternate\" type=\"application/rss+xml\" title=\"Amphora &raquo; Comments Feed\" href=\"https://amphora.net/comments/feed/\" />\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nwindow._wpemojiSettings = {\"baseUrl\":\"https:\\/\\/s.w.org\\/images\\/core\\/emoji\\/15.0.3\\/72x72\\/\",\"ext\":\".png\",\"svgUrl\":\"https:\\/\\/s.w.org\\/images\\/core\\/emoji\\/15.0.3\\/svg\\/\",\"svgExt\":\".svg\",\"source\":{\"concatemoji\":\"https:\\/\\/amphora.net\\/wp-includes\\/js\\/wp-emoji-release.min.js?ver=0980ce573...\n\n\nhttps://on.cypress.io/request\n    at <unknown> (https://www.amphora.net/__cypress/runner/cypress_runner.js:134734:72)\n    at tryCatcher (https://www.amphora.net/__cypress/runner/cypress_runner.js:1777:23)\n    at Promise._settlePromiseFromHandler (https://www.amphora.net/__cypress/runner/cypress_runner.js:1489:31)\n    at Promise._settlePromise (https://www.amphora.net/__cypress/runner/cypress_runner.js:1546:18)\n    at Promise._settlePromise0 (https://www.amphora.net/__cypress/runner/cypress_runner.js:1591:10)\n    at Promise._settlePromises (https://www.amphora.net/__cypress/runner/cypress_runner.js:1671:18)\n    at _drainQueueStep (https://www.amphora.net/__cypress/runner/cypress_runner.js:2377:12)\n    at _drainQueue (https://www.amphora.net/__cypress/runner/cypress_runner.js:2370:9)\n    at Async._drainQueues (https://www.amphora.net/__cypress/runner/cypress_runner.js:2386:5)\n    at Async.drainQueues (https://www.amphora.net/__cypress/runner/cypress_runner.js:2256:14)\nFrom Your Spec Code:\n    at Context.eval (https://www.amphora.net/__cypress/tests?p=cypress/e2e/api/features/petStore.feature:13968:14)\n    at getRet (https://www.amphora.net/__cypress/runner/cypress_runner.js:119371:20)\n    at tryCatcher (https://www.amphora.net/__cypress/runner/cypress_runner.js:1777:23)\n    at Promise.attempt.Promise.try (https://www.amphora.net/__cypress/runner/cypress_runner.js:4285:29)\n    at Context.thenFn (https://www.amphora.net/__cypress/runner/cypress_runner.js:119382:66)\n    at Context.then (https://www.amphora.net/__cypress/runner/cypress_runner.js:119633:21)\n    at wrapped (https://www.amphora.net/__cypress/runner/cypress_runner.js:139910:19)",
                "diff": null
              },
              "uuid": "8ac34c8c-b6ba-444c-bf2f-48dc9fd73e84",
              "parentUUID": "18f0533a-9e8b-40fb-9497-cae620d10ff4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete a pet",
              "fullTitle": "Pet Store API Testing Delete a pet",
              "timedOut": null,
              "duration": 1058,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "[\n  {\n    \"title\": \"cypress-mochawesome-reporter-videos-failed\",\n    \"value\": \"cypress/e2e/api/features/petStore.feature\"\n  },\n  {\n    \"title\": \"cypress-mochawesome-reporter-screenshots\",\n    \"value\": [\n      [\n        \"/petStore.feature/Pet Store API Testing -- Delete a pet (failed).png\"\n      ]\n    ]\n  }\n]",
              "code": "var _a2, _b2, _c2, _d, _e;\n(0, assertions_1.assert)(context.includedPickles[0].id === pickle.id, \"Included pickle stack is unsynchronized\");\nconst { remainingSteps, testCaseStartedId } = retrieveInternalSpecProperties();\ntaskTestCaseStarted(context, {\n  id: testCaseStartedId,\n  testCaseId,\n  attempt: attempt++,\n  timestamp: (0, messages_1.createTimestamp)()\n});\nwindow.testState = {\n  gherkinDocument,\n  pickles,\n  pickle\n};\nconst onAfterStep = (options) => {\n  var _a3, _b3, _c3;\n  const { testStepId, start, result } = options;\n  const end = (0, messages_1.createTimestamp)();\n  if (result === \"pending\" || result === \"skipped\") {\n    if (result === \"pending\") {\n      taskTestStepFinished(context, {\n        testStepId,\n        testCaseStartedId,\n        testStepResult: {\n          status: messages_enums_1.TestStepResultStatus.PENDING,\n          duration: (0, messages_1.duration)(start, end)\n        },\n        timestamp: end\n      });\n    } else {\n      taskTestStepFinished(context, {\n        testStepId,\n        testCaseStartedId,\n        testStepResult: {\n          status: messages_enums_1.TestStepResultStatus.SKIPPED,\n          duration: (0, messages_1.duration)(start, end)\n        },\n        timestamp: end\n      });\n    }\n    remainingSteps.shift();\n    for (const skippedStep of remainingSteps) {\n      const hookIdOrPickleStepId = (0, assertions_1.assertAndReturn)((_b3 = (_a3 = skippedStep.hook) === null || _a3 === void 0 ? void 0 : _a3.id) !== null && _b3 !== void 0 ? _b3 : (_c3 = skippedStep.pickleStep) === null || _c3 === void 0 ? void 0 : _c3.id, \"Expected a step to either be a hook or a pickleStep\");\n      const testStepId2 = getTestStepId({\n        context,\n        pickleId: pickle.id,\n        hookIdOrPickleStepId\n      });\n      taskTestStepStarted(context, {\n        testStepId: testStepId2,\n        testCaseStartedId,\n        timestamp: (0, messages_1.createTimestamp)()\n      });\n      taskTestStepFinished(context, {\n        testStepId: testStepId2,\n        testCaseStartedId,\n        testStepResult: {\n          status: messages_enums_1.TestStepResultStatus.SKIPPED,\n          duration: {\n            seconds: 0,\n            nanos: 0\n          }\n        },\n        timestamp: (0, messages_1.createTimestamp)()\n      });\n    }\n    for (let i = 0, count = remainingSteps.length; i < count; i++) {\n      remainingSteps.pop();\n    }\n    cy.then(() => this.skip());\n  } else {\n    taskTestStepFinished(context, {\n      testStepId,\n      testCaseStartedId,\n      testStepResult: {\n        status: messages_enums_1.TestStepResultStatus.PASSED,\n        duration: (0, messages_1.duration)(start, end)\n      },\n      timestamp: end\n    });\n    remainingSteps.shift();\n  }\n};\nfor (const step of steps) {\n  if (step.hook) {\n    const hook = step.hook;\n    const testStepId = getTestStepId({\n      context,\n      pickleId: pickle.id,\n      hookIdOrPickleStepId: hook.id\n    });\n    cy.then(() => {\n      delete window.testState.pickleStep;\n      const start = (0, messages_1.createTimestamp)();\n      internalProperties.currentStepStartedAt = start;\n      taskTestStepStarted(context, {\n        testStepId,\n        testCaseStartedId,\n        timestamp: start\n      });\n      return cy.wrap(start, { log: false });\n    }).then((start) => {\n      const options = {\n        pickle,\n        gherkinDocument,\n        testCaseStartedId\n      };\n      return (0, cypress_1.runStepWithLogGroup)({\n        fn: dryRun ? noopFn : () => registry2.runCaseHook(this, hook, options),\n        keyword: hook.keyword,\n        text: createStepDescription(hook)\n      }).then((result) => {\n        return { start, result };\n      });\n    }).then(({ start, result }) => onAfterStep({ start, result, testStepId }));\n  } else if (step.pickleStep) {\n    const pickleStep = step.pickleStep;\n    const testStepId = getTestStepId({\n      context,\n      pickleId: pickle.id,\n      hookIdOrPickleStepId: pickleStep.id\n    });\n    const text = (0, assertions_1.assertAndReturn)(pickleStep.text, \"Expected pickle step to have a text\");\n    const scenarioStep = (0, assertions_1.assertAndReturn)(context.astIdsMap.get((0, assertions_1.assertAndReturn)((_a2 = pickleStep.astNodeIds) === null || _a2 === void 0 ? void 0 : _a2[0], \"Expected to find at least one astNodeId\")), `Expected to find scenario step associated with id = ${(_b2 = pickleStep.astNodeIds) === null || _b2 === void 0 ? void 0 : _b2[0]}`);\n    const argument = ((_c2 = pickleStep.argument) === null || _c2 === void 0 ? void 0 : _c2.dataTable) ? new data_table_1.default(pickleStep.argument.dataTable) : ((_e = (_d = pickleStep.argument) === null || _d === void 0 ? void 0 : _d.docString) === null || _e === void 0 ? void 0 : _e.content) ? pickleStep.argument.docString.content : void 0;\n    cy.then(() => {\n      window.testState.pickleStep = step.pickleStep;\n      const start = (0, messages_1.createTimestamp)();\n      internalProperties.currentStep = { pickleStep };\n      internalProperties.currentStepStartedAt = start;\n      taskTestStepStarted(context, {\n        testStepId,\n        testCaseStartedId,\n        timestamp: start\n      });\n      return cy.wrap(start, { log: false });\n    }).then((start) => {\n      const beforeStepHooks = registry2.resolveBeforeStepHooks(tags);\n      const afterStepHooks = registry2.resolveAfterStepHooks(tags);\n      const options = {\n        pickle,\n        pickleStep,\n        gherkinDocument,\n        testCaseStartedId,\n        testStepId\n      };\n      const beforeHooksChain = beforeStepHooks.reduce((chain, beforeStepHook) => {\n        return chain.then(() => (0, cypress_1.runStepWithLogGroup)({\n          keyword: \"BeforeStep\",\n          text: createStepDescription(beforeStepHook),\n          fn: dryRun ? noopFn : () => registry2.runStepHook(this, beforeStepHook, options)\n        }));\n      }, cy.wrap({}, { log: false }));\n      return beforeHooksChain.then(() => {\n        try {\n          return (0, cypress_1.runStepWithLogGroup)({\n            keyword: (0, assertions_1.assertAndReturn)(\"keyword\" in scenarioStep && scenarioStep.keyword, \"Expected to find a keyword in the scenario step\"),\n            argument,\n            text,\n            fn: () => registry2.runStepDefininition(this, text, dryRun, argument)\n          }).then((result) => {\n            return afterStepHooks.reduce((chain, afterStepHook) => {\n              return chain.then(() => (0, cypress_1.runStepWithLogGroup)({\n                keyword: \"AfterStep\",\n                text: createStepDescription(afterStepHook),\n                fn: dryRun ? noopFn : () => registry2.runStepHook(this, afterStepHook, options)\n              }));\n            }, cy.wrap({}, { log: false })).then(() => {\n              return { start, result };\n            });\n          });\n        } catch (e) {\n          if (e instanceof registry_1.MissingDefinitionError) {\n            throw new Error(createMissingStepDefinitionMessage(context, pickleStep, context.registry.parameterTypeRegistry));\n          } else {\n            throw e;\n          }\n        }\n      });\n    }).then(({ start, result }) => onAfterStep({ start, result, testStepId }));\n  }\n}",
              "err": {
                "message": "CypressError: `cy.request()` failed on:\n\nhttps://www.amphora.net/pet\n\nThe response we received from your web server was:\n\n  > 404: Not Found\n\nThis was considered a failure because the status code was not `2xx` or `3xx`.\n\nIf you do not want status codes to cause failures pass the option: `failOnStatusCode: false`\n\n-----------------------------------------------------------\n\nThe request we sent was:\n\nMethod: POST\nURL: https://www.amphora.net/pet\nHeaders: {\n  \"Connection\": \"keep-alive\",\n  \"user-agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Cypress/14.2.1 Chrome/130.0.6723.137 Electron/33.2.1 Safari/537.36\",\n  \"accept\": \"*/*\",\n  \"accept-encoding\": \"gzip, deflate\",\n  \"content-type\": \"application/json\",\n  \"content-length\": 156\n}\nBody: {\"id\":123456,\"name\":\"Rex\",\"category\":{\"id\":1,\"name\":\"dog\"},\"photoUrls\":[\"https://example.com/dog.jpg\"],\"tags\":[{\"id\":1,\"name\":\"cute\"}],\"status\":\"available\"}\n\n-----------------------------------------------------------\n\nThe response we got was:\n\nStatus: 404 - Not Found\nHeaders: {\n  \"date\": \"Sat, 05 Apr 2025 08:11:33 GMT\",\n  \"content-type\": \"text/html; charset=UTF-8\",\n  \"transfer-encoding\": \"chunked\",\n  \"connection\": \"keep-alive\",\n  \"cache-control\": \"no-cache, must-revalidate, max-age=0\",\n  \"content-security-policy\": \"upgrade-insecure-requests\",\n  \"expires\": \"Wed, 11 Jan 1984 05:00:00 GMT\",\n  \"link\": \"<https://amphora.net/wp-json/>; rel=\\\"https://api.w.org/\\\"\",\n  \"server-timing\": \"wp-before-template;dur=574.93\",\n  \"strict-transport-security\": \"max-age=300, max-age=31536000; includeSubDomains\",\n  \"x-cacheproxy-retries\": \"0/2\",\n  \"x-content-type-options\": \"nosniff\",\n  \"x-fawn-proc-count\": \"1,0,24\",\n  \"x-php-version\": \"8.0\",\n  \"x-xss-protection\": \"1; mode=block\",\n  \"x-backend\": \"varnish_ssl\",\n  \"vary\": \"accept-encoding\",\n  \"cf-cache-status\": \"DYNAMIC\",\n  \"server\": \"cloudflare\",\n  \"cf-ray\": \"92b79345ff712e90-HYD\",\n  \"content-encoding\": \"gzip\",\n  \"alt-svc\": \"h3=\\\":443\\\"; ma=86400\"\n}\nBody: <!doctype html>\n<html lang=\"en-US\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    />\n    <meta name=\"format-detection\" content=\"telephone=no\" />\n    <link rel=\"profile\" href=\"https://gmpg.org/xfn/11\">\n\n    <script>\n      // Picture element HTML5 shiv\n      document.createElement('picture');\n    </script>\n\t<script src='//cdn.freshmarketer.com/666159/1717304.js'></script>\n\t<script>\n\t\tvar userValues = {\n\t\t\"lead[email]\":\" value_to_be_replaced\",\n\t\t\"lead[first_name]\":\" value_to_be_replaced\",\n\t\t\"lead[company][name]\":\" value_to_be_replaced\",\n\t\t\"lead[job_title]\":\" value_to_be_replaced\",\n\t\t\"lead[last_name]\":\" value_to_be_replaced\"};\n\t\twindow.FMApi = window.FMApi || []; window.FMApi.push(\"fm_form_tracking\", \"4EBC17F7FB04D3202BC00F2F77BE7BB32C2BD8F5E8EC2B4EE7D4510C739A215D8168EBF0C6C02D7EE85DEF4FBE412B34B1EC396D36D721311AA41B3B1AF965D7\", userValues);\n\t</script>\n    <title>Page not found &#8211; Amphora</title>\n<meta name='robots' content='max-image-preview:large' />\n\t<style>img:is([sizes=\"auto\" i], [sizes^=\"auto,\" i]) { contain-intrinsic-size: 3000px 1500px }</style>\n\t<script id=\"cookieyes\" type=\"text/javascript\" src=\"https://cdn-cookieyes.com/client_data/763f30b3ed10a5017d023e3a/script.js\"></script><link rel='dns-prefetch' href='//amphora.net' />\n<link rel=\"alternate\" type=\"application/rss+xml\" title=\"Amphora &raquo; Feed\" href=\"https://amphora.net/feed/\" />\n<link rel=\"alternate\" type=\"application/rss+xml\" title=\"Amphora &raquo; Comments Feed\" href=\"https://amphora.net/comments/feed/\" />\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nwindow._wpemojiSettings = {\"baseUrl\":\"https:\\/\\/s.w.org\\/images\\/core\\/emoji\\/15.0.3\\/72x72\\/\",\"ext\":\".png\",\"svgUrl\":\"https:\\/\\/s.w.org\\/images\\/core\\/emoji\\/15.0.3\\/svg\\/\",\"svgExt\":\".svg\",\"source\":{\"concatemoji\":\"https:\\/\\/amphora.net\\/wp-includes\\/js\\/wp-emoji-release.min.js?ver=0980ce573...\n\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` failed on:\n\nhttps://www.amphora.net/pet\n\nThe response we received from your web server was:\n\n  > 404: Not Found\n\nThis was considered a failure because the status code was not `2xx` or `3xx`.\n\nIf you do not want status codes to cause failures pass the option: `failOnStatusCode: false`\n\n-----------------------------------------------------------\n\nThe request we sent was:\n\nMethod: POST\nURL: https://www.amphora.net/pet\nHeaders: {\n  \"Connection\": \"keep-alive\",\n  \"user-agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Cypress/14.2.1 Chrome/130.0.6723.137 Electron/33.2.1 Safari/537.36\",\n  \"accept\": \"*/*\",\n  \"accept-encoding\": \"gzip, deflate\",\n  \"content-type\": \"application/json\",\n  \"content-length\": 156\n}\nBody: {\"id\":123456,\"name\":\"Rex\",\"category\":{\"id\":1,\"name\":\"dog\"},\"photoUrls\":[\"https://example.com/dog.jpg\"],\"tags\":[{\"id\":1,\"name\":\"cute\"}],\"status\":\"available\"}\n\n-----------------------------------------------------------\n\nThe response we got was:\n\nStatus: 404 - Not Found\nHeaders: {\n  \"date\": \"Sat, 05 Apr 2025 08:11:33 GMT\",\n  \"content-type\": \"text/html; charset=UTF-8\",\n  \"transfer-encoding\": \"chunked\",\n  \"connection\": \"keep-alive\",\n  \"cache-control\": \"no-cache, must-revalidate, max-age=0\",\n  \"content-security-policy\": \"upgrade-insecure-requests\",\n  \"expires\": \"Wed, 11 Jan 1984 05:00:00 GMT\",\n  \"link\": \"<https://amphora.net/wp-json/>; rel=\\\"https://api.w.org/\\\"\",\n  \"server-timing\": \"wp-before-template;dur=574.93\",\n  \"strict-transport-security\": \"max-age=300, max-age=31536000; includeSubDomains\",\n  \"x-cacheproxy-retries\": \"0/2\",\n  \"x-content-type-options\": \"nosniff\",\n  \"x-fawn-proc-count\": \"1,0,24\",\n  \"x-php-version\": \"8.0\",\n  \"x-xss-protection\": \"1; mode=block\",\n  \"x-backend\": \"varnish_ssl\",\n  \"vary\": \"accept-encoding\",\n  \"cf-cache-status\": \"DYNAMIC\",\n  \"server\": \"cloudflare\",\n  \"cf-ray\": \"92b79345ff712e90-HYD\",\n  \"content-encoding\": \"gzip\",\n  \"alt-svc\": \"h3=\\\":443\\\"; ma=86400\"\n}\nBody: <!doctype html>\n<html lang=\"en-US\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    />\n    <meta name=\"format-detection\" content=\"telephone=no\" />\n    <link rel=\"profile\" href=\"https://gmpg.org/xfn/11\">\n\n    <script>\n      // Picture element HTML5 shiv\n      document.createElement('picture');\n    </script>\n\t<script src='//cdn.freshmarketer.com/666159/1717304.js'></script>\n\t<script>\n\t\tvar userValues = {\n\t\t\"lead[email]\":\" value_to_be_replaced\",\n\t\t\"lead[first_name]\":\" value_to_be_replaced\",\n\t\t\"lead[company][name]\":\" value_to_be_replaced\",\n\t\t\"lead[job_title]\":\" value_to_be_replaced\",\n\t\t\"lead[last_name]\":\" value_to_be_replaced\"};\n\t\twindow.FMApi = window.FMApi || []; window.FMApi.push(\"fm_form_tracking\", \"4EBC17F7FB04D3202BC00F2F77BE7BB32C2BD8F5E8EC2B4EE7D4510C739A215D8168EBF0C6C02D7EE85DEF4FBE412B34B1EC396D36D721311AA41B3B1AF965D7\", userValues);\n\t</script>\n    <title>Page not found &#8211; Amphora</title>\n<meta name='robots' content='max-image-preview:large' />\n\t<style>img:is([sizes=\"auto\" i], [sizes^=\"auto,\" i]) { contain-intrinsic-size: 3000px 1500px }</style>\n\t<script id=\"cookieyes\" type=\"text/javascript\" src=\"https://cdn-cookieyes.com/client_data/763f30b3ed10a5017d023e3a/script.js\"></script><link rel='dns-prefetch' href='//amphora.net' />\n<link rel=\"alternate\" type=\"application/rss+xml\" title=\"Amphora &raquo; Feed\" href=\"https://amphora.net/feed/\" />\n<link rel=\"alternate\" type=\"application/rss+xml\" title=\"Amphora &raquo; Comments Feed\" href=\"https://amphora.net/comments/feed/\" />\n<script type=\"text/javascript\">\n/* <![CDATA[ */\nwindow._wpemojiSettings = {\"baseUrl\":\"https:\\/\\/s.w.org\\/images\\/core\\/emoji\\/15.0.3\\/72x72\\/\",\"ext\":\".png\",\"svgUrl\":\"https:\\/\\/s.w.org\\/images\\/core\\/emoji\\/15.0.3\\/svg\\/\",\"svgExt\":\".svg\",\"source\":{\"concatemoji\":\"https:\\/\\/amphora.net\\/wp-includes\\/js\\/wp-emoji-release.min.js?ver=0980ce573...\n\n\nhttps://on.cypress.io/request\n    at <unknown> (https://www.amphora.net/__cypress/runner/cypress_runner.js:134734:72)\n    at tryCatcher (https://www.amphora.net/__cypress/runner/cypress_runner.js:1777:23)\n    at Promise._settlePromiseFromHandler (https://www.amphora.net/__cypress/runner/cypress_runner.js:1489:31)\n    at Promise._settlePromise (https://www.amphora.net/__cypress/runner/cypress_runner.js:1546:18)\n    at Promise._settlePromise0 (https://www.amphora.net/__cypress/runner/cypress_runner.js:1591:10)\n    at Promise._settlePromises (https://www.amphora.net/__cypress/runner/cypress_runner.js:1671:18)\n    at _drainQueueStep (https://www.amphora.net/__cypress/runner/cypress_runner.js:2377:12)\n    at _drainQueue (https://www.amphora.net/__cypress/runner/cypress_runner.js:2370:9)\n    at Async._drainQueues (https://www.amphora.net/__cypress/runner/cypress_runner.js:2386:5)\n    at Async.drainQueues (https://www.amphora.net/__cypress/runner/cypress_runner.js:2256:14)\nFrom Your Spec Code:\n    at Context.eval (https://www.amphora.net/__cypress/tests?p=cypress/e2e/api/features/petStore.feature:13968:14)\n    at getRet (https://www.amphora.net/__cypress/runner/cypress_runner.js:119371:20)\n    at tryCatcher (https://www.amphora.net/__cypress/runner/cypress_runner.js:1777:23)\n    at Promise.attempt.Promise.try (https://www.amphora.net/__cypress/runner/cypress_runner.js:4285:29)\n    at Context.thenFn (https://www.amphora.net/__cypress/runner/cypress_runner.js:119382:66)\n    at Context.then (https://www.amphora.net/__cypress/runner/cypress_runner.js:119633:21)\n    at wrapped (https://www.amphora.net/__cypress/runner/cypress_runner.js:139910:19)",
                "diff": null
              },
              "uuid": "ba0ec355-d2d6-4041-ad43-c23bf34e0213",
              "parentUUID": "18f0533a-9e8b-40fb-9497-cae620d10ff4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "cd983bcc-2468-412e-aef8-3a5048b570de",
            "0a81b215-afdd-465e-b8d5-45ac1481a24e",
            "8ac34c8c-b6ba-444c-bf2f-48dc9fd73e84",
            "ba0ec355-d2d6-4041-ad43-c23bf34e0213"
          ],
          "pending": [],
          "skipped": [],
          "duration": 3561,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "charts": true,
        "reportPageTitle": "Cypress Test Report",
        "embeddedScreenshots": true,
        "inlineAssets": true,
        "overwrite": false,
        "html": false,
        "json": true,
        "reportDir": "cypress/reports/html/.jsons"
      },
      "version": "6.2.0"
    }
  }
}